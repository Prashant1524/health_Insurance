package com.insurance.uhg.userservice.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.insurance.uhg.userservice.dto.AuthenticationDTO;
import com.insurance.uhg.userservice.repo.RoleRepo;
import com.insurance.uhg.userservice.service.UserDetailImp;
import com.insurance.uhg.userservice.service.UserDetailsServiceImp;
import com.insurance.uhg.userservice.util.JWTUtil;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;

@RestController
@CrossOrigin(origins="http://localhost:3000")
@RequestMapping("/users")
public class AuthenticationController {
	
	@Autowired
	private JWTUtil jwtUtil;
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private UserDetailsServiceImp userDetailsService;
	@Autowired
	RoleRepo roleRepository;
	@Autowired
	PasswordEncoder encoder;
  
	public AuthenticationController(AuthenticationManager authenticationManager2,
			UserDetailsService userDetailsService2, JWTUtil jwtUtil2) {
		// TODO Auto-generated constructor stub
	}

//	@PostMapping("/authenticate")
//	public AuthenticationResponse createAuthenticationToken(@RequestBody AuthenticationDTO authenticationDTO, HttpServletResponse response) throws BadCredentialsException, DisabledException,UsernameNotFoundException, IOException{
//		Authentication auth = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authenticationDTO.getEmail(),authenticationDTO.getPassword()));
//		
//		if (auth == null) {
//			throw new UserNotFoundException("Incorrect username or password");
//		}
//			
//	
//		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationDTO.getEmail());
//		final String jwt = jwtUtil.generateToken(userDetails.getUsername());
//		return new AuthenticationResponse(jwt);
//	}
//	
	 @PostMapping("/signin")
	  public ResponseEntity<?> authenticateUser(@Valid @RequestBody AuthenticationDTO authDTO, HttpServletResponse response) throws BadCredentialsException, DisabledException,UsernameNotFoundException, IOException {

	    Authentication auth = authenticationManager
	        .authenticate(new UsernamePasswordAuthenticationToken(authDTO.getEmail(), authDTO.getPassword()));
	    
	    if (auth == null) {
			throw new UserNotFoundException("Incorrect username or password");
		}


	    UserDetailImp userDetails = (UserDetailImp) authentication.getPrincipal();

	    ResponseCookie jwtCookie = jwtUtils.generateJwtCookie(userDetails);

	    List<String> roles = userDetails.getAuthorities().stream()
	        .map(item -> item.getAuthority())
	        .collect(Collectors.toList());

	    return ResponseEntity.ok().header(HttpHeaders.SET_COOKIE, jwtCookie.toString())
	        .body(new UserInfoResponse(userDetails.getId(),
	                                   userDetails.getUsername(),
	                                   userDetails.getEmail(),
	                                   roles));
	  }

	@GetMapping("/finduser/{email}")
	public List<User> findUser(@PathVariable String email)
	{
		return authservice.findUser(email);
	}
	
	@GetMapping("/validate")
	public String validateToken(@RequestParam("token") String token) {
		jwtUtil.validateToken(token);
		return "Token is valid";
	}
	
	@PutMapping("/updateuser")
	public void updateProduct(@RequestBody User user)
	{	
		user.setPassword(new BCryptPasswordEncoder().encode(user.getPassword()));
		authservice.saveUser(user);
	
	}
	
	@PostMapping("/getotp")
	public void otpVerify(@RequestBody User user){
		authservice.saveUser(user);
		emailService.sendOTPMail(user.getEmail(),user.getFirstName(), user.getOtp());
	}
	
	
	
}
