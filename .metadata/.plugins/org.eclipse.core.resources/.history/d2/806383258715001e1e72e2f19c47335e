package com.healthInsurance.healthInsurance.controller;

import java.io.Serializable;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.healthInsurance.healthInsurance.Exception.PolicyException;
import com.healthInsurance.healthInsurance.model.Policy;
import com.healthInsurance.healthInsurance.service.PolicyPlansService;


@RestController
@RequestMapping("/policy")
public class PolicyPlansController {
	@Autowired
	private PolicyPlansService pps;
	
	@PostMapping("/addPolicy")
	public String savePolicyPlans(@RequestBody Policy pp) 
	{
		//Policy p=new Policy();
		List<Policy> policiesByName = pps.findByPolicyName(pp.getPolicy_name());
		if(policiesByName!=null && policiesByName.size()>0)
		{
			return "Policy already exist";
		}
		if(pp.getPolicy_for()=="Family")
		{
			//System.out.println(pp.getPolicy_for());
			//pp.setPolicy_start_amount(999);
			pp.setPolicy_start_amount(999L);
			return pps.savePolicyPlans(pp);
		}
		return pps.savePolicyPlans(pp);
		
	} 
	@GetMapping("/getAllPolicyPlans")
	public List<Policy> getAllPolicyPlans()
	{
		if(pps.getAllPolicies().isEmpty())
		{
			throw new PolicyException("Empty. Please add some policies");
		}
		return pps.getAllPolicies();
	}
	@GetMapping("/findById/{id}")
	public List<Policy> findByPolicyId(@PathVariable long id)
	{
		if(pps.findByPolicyId(id).isEmpty())
		{
			throw new PolicyException("No such policy exists by this Id");
		}
		return pps.findByPolicyId(id);
	}
	
	
	
	@GetMapping("/findByPolicyF	or/{policy_for}")
	public List<Policy> findByPolicyFor(@PathVariable String policy_for)
	{
		return pps.findByPolicyFor(policy_for);
	}
	@GetMapping("/findByPoliceName/{policy_name}")
	public List<Policy> findByPolicyName(@PathVariable String policy_name) throws Exception
	{	
		if(pps.findByPolicyName(policy_name).isEmpty())
		{
			throw new PolicyException("No such record");
		}
		return pps.findByPolicyName(policy_name);
	}
	@PutMapping("/updatePolicy")
	public void updatePolicy(@RequestBody Policy policy)
	{
		
		if(policy.getPolicy_id()!=0)
		{
			pps.savePolicyPlans(policy);
			System.out.println("Policy updated");
		}
		else
		{
			System.out.println("There is no policy");
			
		}
	}
	@DeleteMapping("/deletePolicy/{id}")
	public void deletePolicy(@PathVariable long id)
	{
		pps.deletePolicy(id);
	}

	
}
